name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  buildConfiguration: Release
  SA_PASSWORD: UmbracoIntegration123!
  UMBRACO__CMS_GLOBAL__ID: 00000000-0000-0000-0000-000000000042
  nodeVersion: 14.18.1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  isTag: $[startsWith('$(build.sourceBranch)', 'refs/tags/')]
  isDev: $[endsWith('$(build.sourceBranch)', 'dev')]
  isFeature: $[contains('$(build.sourceBranch)', '/feature/')]

resources:
  containers:
    - container: mssql
      image: 'mcr.microsoft.com/mssql/server:2019-latest'
      env:
        ACCEPT_EULA: 'Y'
        SA_PASSWORD: $(SA_PASSWORD)
        MSSQL_PID: Developer
      ports:
        - '1433:1433'
      options: '--name mssql'

stages:

  - stage: Build
    jobs:
      - job:
        displayName: build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: use node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: Cache@2
            displayName: cache node_modules
            inputs:
              key: '"node_modules" | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/Umbraco.Web.UI.Client/package-lock.json'
              path: $(Build.SourcesDirectory)/src/Umbraco.Web.UI.Client/node_modules
              cacheHitVar: CACHE_RESTORED
          - task: Npm@1
            displayName: npm ci
            condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
            inputs:
              command: ci
              workingDir: src/Umbraco.Web.UI.Client
              verbose: false
          - task: gulp@0
            displayName: gulp build
            inputs:
              gulpFile: src/Umbraco.Web.UI.Client/gulpfile.js
              targets: build
              workingDirectory: src/Umbraco.Web.UI.Client
          - task: DotNetCoreCLI@2
            displayName: dotnet build
            inputs:
              command: build
              projects: umbraco.sln
              arguments: '--configuration $(buildConfiguration)'
          - task: PublishPipelineArtifact@1
            displayName: publish build artifacts
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output

  - stage: Unit_Tests
    displayName: Unit Tests
    dependsOn: Build
    jobs:
      - job:
        displayName: unit tests
        strategy:
          matrix:
            windows:
              vmImage: 'windows-latest'
              artifactName: build_output
            linux:
              vmImage: 'ubuntu-latest'
              artifactName: build_output
            macOS:
              vmImage: 'macOS-latest'
              artifactName: build_output
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: download build artifacts
            inputs:
              artifact: $(artifactName)
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            condition: and(succeeded(), eq('$(Agent.OS)', 'Darwin')) # net6 already on the other images
            displayName: use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.UnitTests.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'

  - stage: Integration_Tests_SQLite
    displayName: Integration Tests (SQLite)
    dependsOn: Build
    jobs:
      - job:
        displayName: integration tests (SQLite)
        strategy:
          matrix:
            windows:
              vmImage: 'windows-latest'
              artifactName: build_output
            linux:
              vmImage: 'ubuntu-latest'
              artifactName: build_output
            macOS:
              vmImage: 'macOS-latest'
              artifactName: build_output
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: download build artifacts
            inputs:
              artifact: $(artifactName)
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            displayName: use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: test
              projects: '**/Umbraco.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
            env:
              Tests__Database__DatabaseType: 'Sqlite'
              Umbraco__Cms__global__MainDomLock: 'FileSystemMainDomLock'

  - stage: Integration_Tests_SQLServer
    condition: not(or(variables.isDev, variables.isFeature))
    displayName: Integration Tests (SQL Server)
    dependsOn: Build
    jobs:
      - job:
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: 120
        services:
          mssql: mssql
        displayName: integration tests (SQL Server) linux
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            displayName: use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: test
              projects: '**/Umbraco.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
            env:
              Tests__Database__DatabaseType: 'SqlServer'
              Tests__Database__SQLServerMasterConnectionString: 'Server=localhost,1433;User Id=sa;Password=$(SA_PASSWORD);'
              Umbraco__Cms__global__MainDomLock: 'SqlMainDomLock'
      - job:
        timeoutInMinutes: 120
        displayName: integration tests (SQL Server) windows
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - powershell: sqllocaldb start mssqllocaldb
            displayName: start localdb
          - task: UseDotNet@2
            displayName: use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: test
              projects: '**/Umbraco.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
            env:
              Tests__Database__DatabaseType: 'LocalDb'
              Umbraco__Cms__global__MainDomLock: 'MainDomSemaphoreLock'